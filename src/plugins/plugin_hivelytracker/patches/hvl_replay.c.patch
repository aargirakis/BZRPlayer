--- Replayer_Windows/hvl_replay.c	2022-10-28 23:50:38.000000000 +0200
+++ Replayer_Windows/hvl_replay.c	2025-06-27 12:48:48.587902862 +0200
@@ -322,6 +322,9 @@
   }
   
   hvl_InitSubsong( ht, 0 );
+  ht->patternPosBuffer = CreateQueue(22);
+  ht->trackPosBuffer = CreateQueue(22);
+  ht->vumeterBuffer = CreateQueue(22);
   return ht;
 }
 
@@ -541,6 +544,9 @@
   }
   
   hvl_InitSubsong( ht, 0 );
+  ht->patternPosBuffer = CreateQueue(22);
+  ht->trackPosBuffer = CreateQueue(22);
+  ht->vumeterBuffer = CreateQueue(22);
   return ht;
 }
 
@@ -611,6 +617,9 @@
 void hvl_FreeTune( struct hvl_tune *ht )
 {
   if( !ht ) return;
+  DisposeQueue(ht->patternPosBuffer);
+  DisposeQueue(ht->trackPosBuffer);
+  DisposeQueue(ht->vumeterBuffer);
   free( ht );
 }
 
@@ -1630,6 +1639,17 @@
 {
   uint32 i;
 
+
+  if(IsFull(ht->trackPosBuffer))
+  {
+      Dequeue(ht->trackPosBuffer);
+      Dequeue(ht->patternPosBuffer);
+      Dequeue(ht->vumeterBuffer);
+  }
+
+  Enqueue(ht->ht_NoteNr,ht->trackPosBuffer);
+  Enqueue(ht->ht_PosNr,ht->patternPosBuffer);
+
   if( ht->ht_StepWaitFrames == 0 )
   {
     if( ht->ht_GetNewPosition )
@@ -1688,6 +1708,23 @@
 
   for( i=0; i<ht->ht_Channels; i++ )
     hvl_set_audio( &ht->ht_Voices[i], ht->ht_Frequency );
+
+  unsigned char* vumeters = malloc( sizeof(unsigned char) * ht->ht_Channels );
+  for( i=0; i<ht->ht_Channels; i++ )
+  {
+        hvl_set_audio( &ht->ht_Voices[i], ht->ht_Frequency );
+        //printf("voice %i: %i\n",i,ht->ht_Voices[i].vc_AudioVolume);
+
+        if(!ht->ht_Voices[i].vc_TrackOn)
+        {
+            vumeters[i] = 0;
+        }
+        else
+        {
+            vumeters[i] = ht->ht_Voices[i].vc_AudioVolume;
+        }
+  }
+  Enqueue(vumeters,ht->vumeterBuffer);
 }
 
 void hvl_mixchunk( struct hvl_tune *ht, uint32 samples, int8 *buf1, int8 *buf2, int32 bufmod )
@@ -1809,3 +1846,66 @@
     loops--;
   } while( loops );
 }
+
+void  hvl_GetChannelVolumes(struct hvl_tune *ht, unsigned char* volumes)
+{
+    if(!IsEmpty(ht->vumeterBuffer))
+    {
+        int i = 0;
+        for(i=0;i<ht->ht_Channels;i++)
+        {
+            unsigned char* test = Front(ht->vumeterBuffer);
+            volumes[i]=test[i]/64.0*100;
+        }
+    }
+    else
+    {
+        volumes = 0;
+    }
+}
+
+
+//added from Replayer
+/* Returns length of subsong in ms */
+uint32 hvl_GetLen(struct hvl_tune *ht)
+{
+  uint32 duration = 0;
+
+
+
+  do
+  {
+    hvl_play_irq( ht );
+    duration++;
+  } while( ht->ht_SongEndReached == 0 );
+  return (1000 * duration)/50/ht->ht_SpeedMultiplier;
+}
+uint32 hvl_Seek(struct hvl_tune* ht, uint32 time)
+{
+    uint32 PosNr, i;
+
+    PosNr = 0;
+    if (ht->ht_SongNum) PosNr = ht->ht_Subsongs[ht->ht_SongNum - 1];
+
+    ht->ht_PosNr = PosNr;
+    ht->ht_PosJump = 0;
+    ht->ht_PatternBreak = 0;
+    ht->ht_NoteNr = 0;
+    ht->ht_PosJumpNote = 0;
+    ht->ht_Tempo = 6;
+    ht->ht_StepWaitFrames = 0;
+    ht->ht_GetNewPosition = 1;
+    ht->ht_SongEndReached = 0;
+    ht->ht_PlayingTime = 0;
+
+    hvl_reset_some_stuff(ht);
+
+    uint32 duration = 0;
+    uint32 end = time * ht->ht_SpeedMultiplier * 50 / 1000;
+    do
+    {
+        hvl_play_irq(ht);
+        duration++;
+    } while (duration < end);
+    return duration * 1000 / 50 / ht->ht_SpeedMultiplier;
+}
