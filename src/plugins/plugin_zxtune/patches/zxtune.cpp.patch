--- apps/libzxtune/src/zxtune.cpp	2020-08-10 22:20:32.000000000 +0200
+++ apps/libzxtune/src/zxtune.cpp	2025-09-19 07:27:16.061083000 +0200
@@ -26,6 +26,7 @@
 #include <parameters/container.h>
 #include <platform/version/api.h>
 #include <sound/sound_parameters.h>
+#include <track_information.h>
 //std includes
 #include <map>
 
@@ -257,7 +258,7 @@
 {
   try
   {
-    const Binary::Container::Ptr result = Binary::CreateContainer(data, size);
+    const Binary::Container::Ptr result = Binary::CreateContainer(Binary::View{data, size});
     return ContainersCache::Instance().Add(result);
   }
   catch (const std::exception&)
@@ -302,12 +303,16 @@
     Require(info != 0);
     const Module::Holder::Ptr holder = ModulesCache::Instance().Get(module);
     const Module::Information::Ptr modinfo = holder->GetModuleInformation();
-    info->Positions = modinfo->PositionsCount();
-    info->LoopPosition = modinfo->LoopPosition();
+
+    if (const auto *trackinfo = dynamic_cast<const Module::TrackInformation *>(modinfo.get())) {
+      info->Positions = trackinfo->PositionsCount();
+      info->LoopPosition = trackinfo->LoopPosition();
+      info->InitialTempo = trackinfo->Tempo();
+    }
+
     info->Frames = modinfo->FramesCount();
     info->LoopFrame = modinfo->LoopFrame();
     info->Channels = modinfo->ChannelsCount();
-    info->InitialTempo = modinfo->Tempo();
     return true;
   }
   catch (const Error&)
@@ -442,3 +447,21 @@
     return false;
   }
 }
+
+std::string ZXTune_GetInfo(ZXTuneHandle player, std::string paramName)
+{
+  const PlayerWrapper::Ptr wrapper = PlayersCache::Instance().Get(player);
+  const Parameters::Accessor::Ptr props = wrapper->GetParameters();
+  String res;
+  props->FindValue(paramName, res);
+  return res;
+}
+
+ZXTUNE_API long ZXTune_GetDuration(ZXTuneHandle player)
+{
+  const PlayerWrapper::Ptr wrapper = PlayersCache::Instance().Get(player);
+  const Parameters::Accessor::Ptr props = wrapper->GetParameters();
+  Parameters::IntType frameDuration = Parameters::ZXTune::Sound::FRAMEDURATION_DEFAULT;
+  props->FindValue(Parameters::ZXTune::Sound::FRAMEDURATION, frameDuration);
+  return frameDuration;
+}
\ No newline at end of file
