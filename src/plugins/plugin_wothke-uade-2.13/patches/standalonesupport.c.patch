--- src/standalonesupport.c	2014-09-16 19:11:24.000000000 +0200
+++ src/standalonesupport.c	2024-09-21 11:33:59.423194942 +0200
@@ -15,7 +15,7 @@
 #include <fcntl.h>
 #include <dirent.h>
 #include <libgen.h>
-#include <sys/socket.h>
+//#include <sys/socket.h>
 #include <unistd.h>
 #include <limits.h>
 #include <ctype.h>
@@ -39,7 +39,7 @@
 #ifdef EMSCRIPTEN
 	FILE *f; 
 	int status= uade_request_file(filename);
-//	fprintf(stderr, "uade_request_file response for %s: %d\n", filename, status);
+    fprintf(stderr, "uade_request_file response for %s: %d\n", filename, status);
 
 	if (status < 0) {	// file not ready..
 		f= 0; 	
@@ -47,9 +47,10 @@
 		fprintf(stderr, "error: file does not exist: /%s\n", filename);	
 		f= 0;
 	} else {	
-		snprintf(virt_fs_path, 255, "/%s", filename);	
-		f =fopen(virt_fs_path, mode);	// in Emscripten this will use the virtual in memory FS
-//		fprintf(stderr, "loading of: [%s] %s\n", virt_fs_path, f?"succeeded":"failed (must NEVER happen!)");	
+        snprintf(virt_fs_path, 255, "%s", filename);
+        f =fopen(virt_fs_path, mode);	// in Emscripten this will use the virtual in memory FS
+        fprintf(stderr, "loading of: [%s] %s\n", virt_fs_path, f?"succeeded":"failed (must NEVER happen!)");
+        fprintf(stderr,"error: %i\n",errno);
 
 	}
 	open_stat.async_status= status;
@@ -85,7 +86,7 @@
 	return last_file_not_ready;
 }
 									
-									
+
 /* opens file in amiga namespace */
 struct AFILE * uade_open_amiga_file(char *aname, const char *playerdir)
 {
@@ -124,19 +125,22 @@
       snprintf(dirname, sizeof(dirname), "%s/players/ENV/%s", playerdir, remainder);  	// we only have the EaglePlayer..
    } else if (!strcasecmp(dirname, "S")) {
       snprintf(dirname, sizeof(dirname), "%s/players/S/%s", playerdir, remainder);
-    } else {
+    } /*else {
       fprintf(stderr, "uade: open_amiga_file: unknown amiga volume (%s)\n", aname);
       return NULL;
-    }	
+    }*/
     /* fprintf(stderr, "uade: opening from dir %s\n", dirname); */
   } else {
 	snprintf(dirname, sizeof(dirname), aname);	// e.g. railroad tycoon.dl
 //	snprintf(dirname, sizeof(real), "%s/%s", playerdir, aname);
   }
+  if(strlen(dirname)<=1)//hack, will sometimes be C from C: because of the code above, I'm too lazy to fix right now
+  {
+      snprintf(dirname, sizeof(dirname), aname);	// e.g. railroad tycoon.dl
+  }
+fprintf(stderr, "amiga out: opening [%s]\n", dirname);
 
-//fprintf(stderr, "amiga out: opening [%s]\n", dirname);
-
-  struct AFILE *uo= uade_fopen(dirname, "r");
+  struct AFILE *uo= uade_fopen(dirname, "rb");
   
   if (uo->file == 0) {
 	// when this happens it might be a misconfiguration - in the JavaScript context
@@ -152,7 +156,9 @@
 	}
 	quit_program = 1;
     uade_reboot = 1;
-	
+    fprintf(stderr, "quit_program couldn't open file\n");
+    missing_file = 1;
+
     fprintf (stderr, "uade: couldn't open file (%s) induced by (%s)\n", dirname, aname);
   }
   return uo;
@@ -161,4 +167,15 @@
 
 void uade_portable_initializations(void)
 {
-}
\ No newline at end of file
+}
+
+//added temporarily
+extern int uade_request_file(const char *filename)
+{
+	return 0;
+}
+extern long uade_request_file_size(const char *filename)
+{
+    fprintf (stderr, "uade_request_file_size: %s\n", filename);
+    return 0;
+}
