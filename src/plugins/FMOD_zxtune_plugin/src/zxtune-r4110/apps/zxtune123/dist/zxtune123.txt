< __HEADER__
> ""

#shared cmdline keys
#TODO: make share capabilities keys
+ ../text/cmd_keys_local.txt

#markup
= HEADER
txt> ""
html> "<html>\n<body>"

= FOOTER
txt> ""
html> "</body>\n</html>"

= HEAD_BEGIN
txt> "\n"
html> "\n<h3>"

= HEAD_END
txt> "\n"
html> "</h3>\n"

= PRE_BEGIN
txt> ""
html> "<code>"

= PRE_END
txt> ""
html> "</code>"

= SAMPLE_SECT_BEGIN
txt> "\n" PRE_BEGIN
html> "<pre>\n"

= SAMPLE_BEGIN
> "\t"

= SAMPLE_END
> "\n"

= SAMPLE_SECT_END
txt> PRE_END "\n"
html> "</pre>\n"

#lang-independent parts
= SAMPLE_SYNOPSIS
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "zxtune123 information keys" SAMPLE_END
> SAMPLE_BEGIN "zxtune123 [parameters] [--" CMD_INPUT_FILE_KEY "] file1 [file2 ...]" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_CONFSTRING
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "aaa.bbb.ccc=1,aaa.bbb.ddd=#abcdef,aaa.bbb.eee='a,b,c,d'" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_CORE_OPTIONS
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "--" CMD_CORE_OPTS_KEY " aym.type=1,dac.interpolation=1" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_CONFIG_FILE
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "#comment" SAMPLE_END
> SAMPLE_BEGIN "some.option.parameter.name=value" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_PATH_VIEW
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "data/path/itself${delimiter}subdata/path/inside" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_PATH_1
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "FILE.trd?FILE1.C/+125" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_PATH_1_1
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "FILE.trd?FILE1.C/+125/+unHRIP1/+50" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_BACKEND_OPTS
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "--oss device=/dev/dsp1,mixer=/dev/mixer1" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_WAV_BACKEND_1
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "--wav filename=1/[Fullpath]" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_WAV_BACKEND_2
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "--wav filename=[Author]-[Title].wav" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_WAV_RESULT_1
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "1/FILE_trd_FILE1_C_+125.wav" SAMPLE_END
> SAMPLE_SECT_END

= SAMPLE_CONVERT_COMMON
> SAMPLE_SECT_BEGIN
> SAMPLE_BEGIN "--" CMD_CONVERT_KEY " mode=${mode},filename=${filename}" SAMPLE_END
> SAMPLE_SECT_END

#main text
< __RAWHEADER__
en> HEADER
en> "Quick reference for zxtune123\n\n"

en> HEAD_BEGIN "SYNOPSIS" HEAD_END
en> SAMPLE_SYNOPSIS

en> HEAD_BEGIN "DESCRIPTION" HEAD_END
en> "zxtune123 is CLI utility to search, playback or convert chiptunes, basically, "
en> "ZX Spectrum-related. Program is available at least on Linux and Windows "
en> "platforms (both 32- and 64-bit).\n"

en> HEAD_BEGIN "COMMON INFORMATIONAL KEYS" HEAD_END
en> SAMPLE_SECT_BEGIN
en> SAMPLE_BEGIN "--" CMD_HELP_KEY "\t\tUsed to display brief help about supported options." SAMPLE_END
en> SAMPLE_BEGIN "--" CMD_VERSION_KEY "\tShowing repository revision program build from." SAMPLE_END
en> SAMPLE_SECT_END

en> HEAD_BEGIN "PARAMETERS CONCEPT" HEAD_END
en> "Parameters are stored as an associative array: name => value. Name is just a "
en> "string which is usually consists of \"namespaces\" and parameter name itself "
en> "delimited by a dot. E.g.: " PRE_BEGIN "aaa.bbb.ccc.ddd" PRE_END " - describes parameter "
en> PRE_BEGIN "ddd" PRE_END " which is located in nested namespaces, used to "
en> "clarify scope of parameter. Usually, "
en> PRE_BEGIN "aaa" PRE_END " - is the name of library/application. Value can be "
en> "one of the next types: string, integer, blob.\n"
en> "As far as parameters are passed via text input (command line), they should be "
en> "encoded to determine actual types. Here the next assumptions (in regular "
en> "expression notation):\n"

en> SAMPLE_SECT_BEGIN
en> SAMPLE_BEGIN "#([:xdigit:][:xdigit])+\t\t- blob data" SAMPLE_END
en> SAMPLE_BEGIN "[-+]?[:digit:]+\t\t\t- integer value (64 bit signed integer)" SAMPLE_END
en> SAMPLE_BEGIN "any other\t\t\t- string value" SAMPLE_END
en> SAMPLE_SECT_END

en> "To force value to be a string (even if it's looked as not a string), quote it "
en> "with the \"'\" symbol. E.g.: \"'123'\" - is a string, but \"123\" is integer. If "
en> "string already contains \"'\" symbol at the beginning and/or end, it should be "
en> "escaped too.\n"
en> "To pass multiple parameters they should be delimited by comma. If parameter's "
en> "value already contains comma, it should be escaped (obviously, it's a "
en> "string). E.g.:\n"

en> SAMPLE_CONFSTRING

en> HEAD_BEGIN "OPTIONS" HEAD_END
en> "To show all the options, supported by zxtune123 application, run it with the "
en> PRE_BEGIN "--" CMD_INFO_LIST_OPTIONS_KEY " parameter" PRE_END ". As you will see, they can be simple grouped by "
en> "quite long prefix which represents options' category. There are some of the "
en> "specific keys which are used to specify options for one category only. E.g. "
en> PRE_BEGIN "--" CMD_CORE_OPTS_KEY PRE_END " key is used to setup options with "
en> PRE_BEGIN "\"zxtune.core.\"" PRE_END " prefix:\n"

en> SAMPLE_CORE_OPTIONS

en> "specifies options: " PRE_BEGIN "zxtune.core.aym.type" PRE_END " and "
en> PRE_BEGIN "zxtune.core.dac.interpolation" PRE_END ".\n"
en> "Some of the long options are duplicated by the short commandline options.\n"

en> HEAD_BEGIN "CONFIGURATION" HEAD_END
en> "To avoid specifying options each time you start the program, you can put some "
en> "of them into configuration file which has the simple form:\n"

en> SAMPLE_CONFIG_FILE

en> "Pay attention, that configuration file options should be specified by the "
en> "full name.\n"
en> "Configuration file is searched according to the next sequence:\n"
en> "- exactly specified file via " PRE_BEGIN "--" CMD_CONFIG_KEY " name" PRE_END " parameter. If file is not "
en> "accessible, error occurred\n"
en> "- " PRE_BEGIN "zxtune.conf" PRE_END " in current working directory\n"
en> "- " PRE_BEGIN "zxtune.conf" PRE_END " in home directory ("
en> PRE_BEGIN "~/.zxtune/zxtune.conf" PRE_END " in *nix systems, and "
en> PRE_BEGIN "%APPDATA%\\zxtune\\zxtune.conf" PRE_END " in windows systems)\n"

en> HEAD_BEGIN "INPUT/OUTPUT" HEAD_END
en> "IO subsystem is used to provide source data to work with. It's implemented "
en> "via \"provider\" abstraction. To list supported providers use " PRE_BEGIN "--" CMD_INFO_LIST_PROVIDERS_KEY PRE_END
en> " key. Here you can get the name of some provider to setup it using "
en> PRE_BEGIN "--" CMD_IO_PROVIDERS_OPTS_KEY PRE_END " key which adds "
en> PRE_BEGIN "\"zxtune.io.providers.\"" PRE_END " prefix to all the "
en> "parameters specified.\n"
en> "Input data path is usually consists of two parts- data path itself and "
en> "optional virtual path inside the accessed data. First part is used to choose "
en> "appropriate provider and get the data using the path. Second part is used to "
en> "specify some of the subsequent data inside (e.g. path inside archive and so):\n"

en> SAMPLE_PATH_VIEW

en> "\"file\" provider.\n"
en> "Used to get access to local file systems. Uses \"?\" symbol as a delimiter "
en> "between path parts and system-dependent delimiter between path components. To "
en> "force usage of this provider, prepend path with the \"file://\" scheme.\n"
en> "Options:\n"
en> PRE_BEGIN "zxtune.io.providers.file.mmap_threshold" PRE_END " - integer value which is used as a "
en> "limit for simple reading. If file size is greater or equal to this value, "
en> "it will be opened using memory mapping technology (which is usually faster, "
en> "but locks write access to opened file during its processing).\n"

en> HEAD_BEGIN "MODULES PROCESSING" HEAD_END
en> "After the source data is opened, it's passed into library core to detect all "
en> "of the supported chiptunes inside using plugin subsystem. To list all the "
en> "currently supported plugins use " PRE_BEGIN "--" CMD_INFO_LIST_PLUGINS_KEY PRE_END " key. Here you can get the "
en> "plugin identifier, some of the additional information and supported "
en> "capabilities. There are three categories of plugins.\n"

en> "Multitrack plugins. Used to support \"containers\" - blocks of data with "
en> "specific structure which are used for identification and getting access to "
en> "subsequent data inside. Usually, it's filename. All of these plugins has "
en> PRE_BEGIN "stor_multitrack" PRE_END " capability.\n"

en> "Archive container plugins. They provides transformation of data block from "
en> "one form to another without any possibility to identify subdata inside. Uses path component in form " 
en> PRE_BEGIN "+un${Id}" PRE_END ", where \"Id\" is plugin identifier. All of these plugins "
en> "has " PRE_BEGIN "stor_container" PRE_END " capability.\n"

en> "Module plugins. They are endpoint plugins used to perform interpretation and "
en> "playback of input data. All of these plugins has " PRE_BEGIN "stor_module" PRE_END " capability. In "
en> "addition to this, there're some clarification about module type supported:\n"
en> PRE_BEGIN "dev_*" PRE_END "  - specified device used to playback (e.g. " PRE_BEGIN "dev_aym, dev_dacN" PRE_END " etc)\n"
en> PRE_BEGIN "conv_*" PRE_END " - specified format module supported to convert at. See CONVERSION "
en> "section below.\n\n"

en> "There's one more plugin, which is formally \"container\", but has some specific "
en> "meaning- raw scanner. It's used to search modules inside raw data dump. It has "
en> PRE_BEGIN "stor_multitrack" PRE_END " and " PRE_BEGIN "stor_scaner" PRE_END " capabilities and uses " PRE_BEGIN "+${number}" PRE_END " virtual "
en> "\"filenames\" to specify internal data path, where \"number\" is just an offset "
en> "of data in bytes (BTW, zero offset can be specified, but never returned).\n"
en> "Some of the container plugins has " PRE_BEGIN "stor_plain" PRE_END " capability, which means that "
en> "processed data is stored inside container \"as is\" and can be found using raw "
en> "scanner mentioned above.\n"

en> "Internal module subpath consists of sequence of plugin-specific path "
en> "components. E.g.:\n"

en> SAMPLE_PATH_1

en> "in the simplest case means that there's some data inside file " PRE_BEGIN "FILE1.C" PRE_END " at offset of 125 bytes which "
en> "is located in local file " PRE_BEGIN "FILE.trd" PRE_END ". Every container "
en> "plugin should be addressed by at least one component.\n"
en> "Archive containers' path components clarifies nesting and avoids ambiguity:"

en> SAMPLE_PATH_1_1

en> HEAD_BEGIN "ATTRIBUTES" HEAD_END
en> "Every module has variable set of attributes which is filled while processing. "
en> "To see all the supported attributes use " PRE_BEGIN "--" CMD_INFO_LIST_ATTRIBUTES_KEY PRE_END " key. Attributes are "
en> "used to setup file-based backends and conversion (see below).\n"
en> PRE_BEGIN CMD_INPUT_PROGRESS_KEY PRE_END " key is used to display modules searching progress.\n"

en> HEAD_BEGIN "SOUND" HEAD_END
en> "To playback opened and detected module you should specify way to do it- "
en> "specify backend and its optional parameters. To list currently supported "
en> "backends use " PRE_BEGIN "--" CMD_INFO_LIST_BACKENDS_KEY PRE_END " key. After program is started, it tries "
en> "different backends to playback and stops when attempt finished successfully. "
en> "Specified backend forcing and parameters specifying can be done using key "
en> PRE_BEGIN "--${name}" PRE_END ", where \"name\" is backend's identifier. Optional parameters are used "
en> "to setup. E.g.:\n"

en> SAMPLE_BACKEND_OPTS

en> "forces OSS backend and applies options " PRE_BEGIN "\"zxtune.sound.backends.oss.device\"" PRE_END " and "
en> PRE_BEGIN "\"zxtune.sound.backends.oss.mixer\"" PRE_END ".\n"
en> "By default, program tries standard system-specific backends and fallback "
en> PRE_BEGIN "--null" PRE_END " backend when no one can be used. When backends are specified exactly, "
en> "no additional checklist is affected. Null backend has no options and can be "
en> "used to perform benchmark tests.\n"

en> HEAD_BEGIN "FILE-BASED BACKENDS" HEAD_END
en> "File-based backends (currently, \"wav\") cannot be used as a default since they "
en> "should be tuned- use backend parameter " PRE_BEGIN "\"filename=...\"" PRE_END " to specify output file "
en> "template. E.g.:\n"

en> SAMPLE_WAV_BACKEND_1

en> "and\n"

en> SAMPLE_WAV_BACKEND_2

en> "will produce files according to specified templates. Note that before "
en> "substituting all fields are escaped to form valid file system path. E.g.\n"

en> SAMPLE_PATH_1

en> "with "

en> SAMPLE_WAV_BACKEND_1

en> " template will produce\n"

en> SAMPLE_WAV_RESULT_1

en> "file (if extension is not specified exactly, it's added automatically).\n"
en> "Non-existing fields are skipped.\n"

en> HEAD_BEGIN "CONVERSION" HEAD_END
en> "To convert chiptune(s) from initial format to another one, use --" CMD_CONVERT_KEY " key with "
en> "mandatory parameters which are used to specify working mode and target. Syntax is:"

en> SAMPLE_CONVERT_COMMON

en> "where " PRE_BEGIN "mode" PRE_END " key is used to specify target format type and "
en> PRE_BEGIN "filename" PRE_END " key is used to specify filename (same as described in FILE-BASED BACKENDS section)."
en> "All of the supported conversion modes are listed in --" CMD_CONVERT_KEY " key section in brief help message."
en> "In case of converting multiple files when some of then cannot be converted, proper message displayed. "
en> PRE_BEGIN "conv_*" PRE_END " capabilities can be used to determine supported conversion format for each plugin "
en> "(see MODULES PROCESSING section). " PRE_BEGIN "raw" PRE_END " mode means raw source module dump (without any "
en> "players or additional supplementary data). It's supported by the all module plugins and can be used for ripping.\n"

en> HEAD_BEGIN "OTHER PARAMETERS" HEAD_END
en> "Additional keys can be used while working with program:\n"
en> PRE_BEGIN "--" CMD_ANALYZER_KEY PRE_END " key is used to switch on spectrum analyzer while playback.\n"
en> PRE_BEGIN "--" CMD_UPDATEFPS_KEY PRE_END " key specifies console update frequency for dynamic output.\n"
en> PRE_BEGIN "--" CMD_SEEKSTEP_KEY PRE_END " key specifies seeking step in percents.\n"
en> PRE_BEGIN "--" CMD_QUIET_KEY PRE_END " key is used to switch off all the dynamic output while playback.\n"
en> PRE_BEGIN "--" CMD_SILENT_KEY PRE_END " key switches off all the output.\n"

en> HEAD_BEGIN "CONTROL KEYS" HEAD_END
en> "The main control keys are:\n"
en> "Left,Right - seeking upon the module (see " PRE_BEGIN "--" CMD_SEEKSTEP_KEY PRE_END " key)\n"
en> "Up,Down - volume control (if specified backend support hardware volume changing)\n"
en> "Esc,Q - exit\n"
en> "Enter - pause/resume playback\n"
en> "Space - search for the next module or exit in case of last one\n"

en> HEAD_BEGIN "To be continued" HEAD_END

en> FOOTER
