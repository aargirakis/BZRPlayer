/**
*
* @file
*
* @brief  Curl api dynamic gate implementation
*
* @author vitamin.caig@gmail.com
*
**/

//local includes
#include "curl_api.h"
//common includes
#include <make_ptr.h>
//library includes
#include <debug/log.h>
#include <platform/shared_library_adapter.h>

namespace IO
{
  namespace Curl
  {
    class LibraryName : public Platform::SharedLibrary::Name
    {
    public:
      LibraryName()
      {
      }

      std::string Base() const override
      {
        return "curl";
      }
      
      std::vector<std::string> PosixAlternatives() const override
      {
        static const std::string ALTERNATIVES[] =
        {
          "libcurl.so.3",
          "libcurl.so.4",
        };
        return std::vector<std::string>(ALTERNATIVES, std::end(ALTERNATIVES));
      }
      
      std::vector<std::string> WindowsAlternatives() const override
      {
        static const std::string ALTERNATIVES[] =
        {
          "libcurl.dll",
        };
        return std::vector<std::string>(ALTERNATIVES, std::end(ALTERNATIVES));
      }
    };

<TMPL_INCLUDE NAME="../../../sound/backends/templates/api_dynamic.cpp.templ">

    Api::Ptr LoadDynamicApi()
    {
      static const LibraryName NAME;
      const Platform::SharedLibrary::Ptr lib = Platform::SharedLibrary::Load(NAME);
      return MakePtr<DynamicApi>(lib);
    }
  }
}
