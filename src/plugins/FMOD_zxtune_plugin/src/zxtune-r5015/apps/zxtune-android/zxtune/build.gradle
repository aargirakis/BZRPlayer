apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "app.zxtune"
        minSdkVersion 16
        targetSdkVersion 30
        //supported languages
        resConfigs "en", "de", "ru", "es", "cs", "zh", "ja", "pt"
        //supported densities for vector drawables rasterization
        vectorDrawables.generatedDensities  "mdpi", "hdpi", "xhdpi", "xxhdpi"

        javaCompileOptions {
            annotationProcessorOptions.arguments += [
                "room.schemaLocation": "${project.buildDir}/schemas".toString()
            ]
        }
    }

    buildFeatures {
        renderScript false
        shaders false
        dataBinding true
    }

    packagingOptions {
        exclude 'META-INF/*.version'
        //jsoup
        exclude 'META-INF/CHANGES'
        exclude 'META-INF/*.md'
        //kotlin
        exclude '**/*.kotlin_*'
    }
}

configurations {
    developImplementation {}
}

dependencies {
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
    implementation "androidx.media:media:$media_version"
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.recyclerview:recyclerview-selection:1.1.0'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.documentfile:documentfile:1.0.1'

    developImplementation 'com.squareup.leakcanary:leakcanary-android:2.3'
}

apply from: "${treeRoot}/make/android/android.gradle"
apply from: "${treeRoot}/make/android/nativelibs.gradle"

// Testing related
android {
    defaultConfig {
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'org.mockito:mockito-android:2.24.0'
    androidTestImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:3.2.0'
    testImplementation 'androidx.test:core-ktx:1.4.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.4.1'
    kaptTest "androidx.room:room-compiler:$room_version"
}

android {
    defaultConfig {
        def modarchiveKey = localProperties.getProperty("key.modarchive", "")
        buildConfigField("String", "MODARCHIVE_KEY", "\"${modarchiveKey}\"")

        def cdnRoot = localProperties.getProperty('cdn.root')
        if (cdnRoot != null) {
            buildConfigField("String", "CDN_ROOT", "\"${cdnRoot}\"")
        }
        def apiRoot = localProperties.getProperty('api.root')
        if (apiRoot != null) {
            buildConfigField("String", "API_ROOT", "\"${apiRoot}\"")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
