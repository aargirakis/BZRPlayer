/*
 * Generic functionality for Android project building
 *
 */


def makeOutput(cmdline) {
    return "make --quiet ${cmdline}".execute().text.trim()
}

def computeVersionCode() {
    def code = makeOutput("-f ${treeRoot}/make/version.mak version_index")
    return code.toInteger()
}

def computeVersionName() {
    def name = makeOutput("-f ${treeRoot}/make/version.mak version_name")
    return name
}

def loadLocalProperties() {
    def properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return properties
}

ext {
    localProperties = loadLocalProperties()
}

android {

    defaultConfig {
        versionCode computeVersionCode()
        versionName computeVersionName()
    }

    lintOptions {
        checkReleaseBuilds false
    }

    signingConfigs {
        release {
            storeFile file("${treeRoot}/make/android/release.keystore")
            storePassword localProperties.getProperty("key.store.password")
            keyAlias "release"
            keyPassword localProperties.getProperty("key.alias.password")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
        }

        develop {
            initWith debug
            signingConfig signingConfigs.release
        }
    }

    sourceSets {
        develop {
            java.srcDirs = ['src/develop/java', 'src/main/java', 'src/debug/java']
        }
    }

    lintOptions {
        abortOnError false
    }
}

// publish
android {
    ext.publicBuildsDir = "${treeRoot}/Builds/${defaultConfig.versionName}/android"

    task publicBuild(group: "Publish") {}

    applicationVariants.all { variant ->
        def suffix = variant.name.capitalize()
        def baseName = "${project.name}_${defaultConfig.versionName}"
        def publishApk = task("publishApk${suffix}", group: "Publish", dependsOn: ["assemble${suffix}"] ).doLast {
            variant.outputs.each { out ->
              copy {
                def abi = out.getFilter("ABI")
                from out.outputFile
                into publicBuildsDir
                rename ".*\\.apk", "${baseName}${abi ? '_' + abi : ''}.apk"
              }
            }
        }

        def publishAab = task("publishAab${suffix}", group: "Publish", dependsOn: ["bundle${suffix}"]).doLast {
            def aab = tasks["sign${suffix}Bundle"].outputs.files.filter { it.name.endsWith('.aab') }.singleFile
            copy {
               from aab
               into publicBuildsDir
               rename ".*\\.aab", "${baseName}.aab"
            }
        }

        def publicBuildVariant = task("publicBuild${suffix}", group: "Publish") {
            if (variant.buildType.name == "release") {
               if (variant.name =~ /thin/) {
                  dependsOn publishAab
               } else {
                  dependsOn publishApk
               }
            }
        }

        publicBuild.dependsOn publicBuildVariant
    }
}
