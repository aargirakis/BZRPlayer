--- src/standalonesupport.c	2019-06-21 15:52:56.000000000 +0200
+++ src/standalonesupport.c	2025-06-26 20:07:42.633255052 +0200
@@ -15,7 +15,6 @@
 #include <fcntl.h>
 #include <dirent.h>
 #include <libgen.h>
-#include <sys/socket.h>
 #include <unistd.h>
 #include <limits.h>
 #include <ctype.h>
@@ -34,12 +33,61 @@
 
 char virt_fs_path[512];
 
+#ifndef WIN32
+int case_insensitive_compare(const unsigned char *a, const unsigned char *b) {
+	while (*a && *b) {
+		if (tolower(*a) != tolower(*b)) {
+			return 0;
+		}
+		a++;
+		b++;
+	}
+	return *a == *b;
+}
+
+FILE *fopen_case_insensitive(const char *name, const char *mode) {
+	FILE *fp = fopen(name, mode);
+	if (fp) {
+		return fp;
+	}
+
+	char *nameDup = strdup(name);
+	char *dirName = dirname(nameDup);
+
+	if (!strcmp(dirName, ".")) {
+		free(nameDup);
+		return NULL;
+	}
+
+	DIR *dir = opendir(dirName);
+	if (dir == NULL) {
+		free(nameDup);
+		return NULL;
+	}
+
+	struct dirent *entry;
+
+	while ((entry = readdir(dir)) != NULL) {
+		if (case_insensitive_compare(entry->d_name, basename(name))) {
+			char pdxPath[PATH_MAX];
+			snprintf(pdxPath, sizeof(pdxPath), "%s/%s", dirName, entry->d_name);
+			fp = fopen(pdxPath, mode);
+			break;
+		}
+	}
+
+	closedir(dir);
+	free(nameDup);
+	return fp;
+}
+#endif
+
 struct AFILE * uade_fopen(const char *filename, const char *mode) {
 // every file access comes through this API... return NULL to signal "file not ready" error .. 
 #ifdef EMSCRIPTEN
 	FILE *f; 
 	int status= uade_request_file(filename);
-//	fprintf(stderr, "uade_request_file response for %s: %d\n", filename, status);
+	fprintf(stderr, "uade_request_file response for %s: %d\n", filename, status);
 
 	if (status < 0) {	// file not ready..
 		f= 0;
@@ -48,9 +96,14 @@
 //		fprintf(stderr, "error: file does not exist: /%s\n", filename);	
 		f= 0;
 	} else {	
-		snprintf(virt_fs_path, 512, "/%s", filename);	
+		snprintf(virt_fs_path, 512, "%s", filename);
+#ifdef WIN32
 		f =fopen(virt_fs_path, mode);	// in Emscripten this will use the virtual "in-memory FS"
-//		fprintf(stderr, "loading of: [%s] %s\n", virt_fs_path, f?"succeeded":"failed (must NEVER happen!)");	
+#else
+		f = fopen_case_insensitive(virt_fs_path, mode);
+#endif
+		fprintf(stderr, "loading of: [%s] %s\n", virt_fs_path, f?"succeeded":"failed (must NEVER happen!)");
+		fprintf(stderr,"error: %i\n",errno);
 	}
 	open_stat.async_status= status;
 	open_stat.file= f;
@@ -124,10 +177,7 @@
 	  snprintf(dirname, sizeof(dirname), "%s/players/ENV/%s", playerdir, remainder);  	// we only have the EaglePlayer..
 	} else if (!strcasecmp(dirname, "S")) {
       snprintf(dirname, sizeof(dirname), "%s/players/S/%s", playerdir, remainder);	  
-    } else {
-      fprintf(stderr, "uade: open_amiga_file: unknown amiga volume (%s)\n", aname);
-      return NULL;
-    }	
+    }
     /* fprintf(stderr, "uade: opening from dir %s\n", dirname); */
   } else {
 	if (!strncasecmp(ptr, "AYPlayers", 9)) {
@@ -141,10 +191,14 @@
 	}
   }
   
+  if(strlen(dirname) <= 1) //hack, will sometimes be C from C: because of the code above, I'm too lazy to fix right now
+  {
+    snprintf(dirname, sizeof(dirname), aname);	// e.g. railroad tycoon.dl
+  }
 
-//fprintf(stderr, "amiga out: opening [%s]\n", dirname);
+  fprintf(stderr, "amiga out: opening [%s]\n", dirname);
 
-  struct AFILE *uo= uade_fopen(dirname, "r");
+  struct AFILE *uo= uade_fopen(dirname, "rb");
   
   if (uo->file == 0) {
 	// when this happens it might be a misconfiguration - in the JavaScript context
@@ -160,7 +214,10 @@
 	}
 	quit_program = 1;
     uade_reboot = 1;
-	
+
+  	fprintf(stderr, "quit_program couldn't open file\n");
+  	missing_file = 1;
+
   }
   return uo;
 }
@@ -168,4 +225,15 @@
 
 void uade_portable_initializations(void)
 {
+}
+
+//added temporarily
+extern int uade_request_file(const char *filename)
+{
+  return 0;
+}
+extern long uade_request_file_size(const char *filename)
+{
+  fprintf (stderr, "uade_request_file_size: %s\n", filename);
+  return 0;
 }
\ No newline at end of file
