.TH "as68" 1 "29 Aug 2003" "sc68-tools-manual" \" -*- nroff -*-
.ad l
.nh
.SH NAME
as68 \- MC68000 Macro Assembler.
.SH "AUTHOR"
.PP
Copyright (C) 1993-2003 Vincent Penne and Benjamin Gerard
.PP
This program is free software.
.SH "DATE"
.PP
2003
.SH "SYNOPSIS"
.PP
as68 [options]  [-o ] [-s ]
.SH "DESCRIPTION"
.PP
as68 is a very fast Motorola 68000 macro assembler.
.SH "OPTIONS"
.PP
.IP "\(bu" 2
\fB-r\fP Do not produce relocation table (default) 
.IP "\(bu" 2
\fB-R\fP Produce relocation table 
.IP "\(bu" 2
\fB-p\fP No position independant code check (default) 
.IP "\(bu" 2
\fB-P\fP Warning position dependant addressing mode 
.IP "\(bu" 2
\fB-v\fP Disable verbose 
.IP "\(bu" 2
\fB-V\fP Enable Verbose (default) 
.IP "\(bu" 2
\fB-b\fP[Kbytes] Change code buffer (Kbytes is a number of Kbyte) 
.IP "\(bu" 2
\fB-s\fP  Set relocation table filename (def:.rel) 
.IP "\(bu" 2
\fB-o\fP  Set output filename (def:.bin)
.PP
.SH "ASSEMBLER SYNTAX"
.PP
as68 syntax is very close to hisoft genst(tm). Except for some assembly directives are which are followed by a { ... } block. In other words it should be close enough to Motorola specifications.
.SS "MACRO SYNTAX"
Following sample should demonstrate macro basic syntax.
.PP
.PP
.nf
 name MACRO
 {
 label_\\@:        ;\\@ is replaced by macro unic id (incremented number).
   move.l #\\1,\\2  ;\\1 is the first macro parameter, \2 the second ...
 }
.PP
.SS "ASSEMBLER CONTROL DIRECTIVES"
.IP "\(bu" 2
\fBALIGN\fP [EXPR] Set align to given position 
.IP "\(bu" 2
\fBDEFAULT\fP [BYTE|WORD] Set default opcode size 
.IP "\(bu" 2
\fBEVEN\fP Set align to next even position 
.IP "\(bu" 2
\fBIF\fP [EXPR] Start a conditionnal block 
.IP "\(bu" 2
\fBINCBIN\fP [FILE] Include binary file. 
.IP "\(bu" 2
\fBINCLUDE\fP [FILE] Include source file. 
.IP "\(bu" 2
\fBLOAD\fP [EXPR] Set load address (cross devel) 
.IP "\(bu" 2
\fBLS\fP [FILE] Load symbol 
.IP "\(bu" 2
\fBLST\fP [FILE] Load symbol 2! 
.IP "\(bu" 2
\fBORG\fP [EXPR] Set assembly address. 
.IP "\(bu" 2
\fBPRINT\fP [EXPR] Output a message 
.IP "\(bu" 2
\fBRELOCATION\fP [on|off] Set relocation generation 
.IP "\(bu" 2
\fBREPEAT\fP Start a \fBREPEAT\fP ... \fBUNTIL\fP loop 
.IP "\(bu" 2
\fBRPT\fP as \fBREPEAT\fP 
.IP "\(bu" 2
\fBRSRESET\fP Reset current structure 
.IP "\(bu" 2
\fBRSSET\fP Add a field to current structure 
.IP "\(bu" 2
\fBRUN\fP [EXPR] Set run address (cross devel) 
.IP "\(bu" 2
\fBUNTIL\fP cond End a \fBREPEAT\fP ... \fBUNTIL\fP loop 
.IP "\(bu" 2
\fBWHILE\fP [EXPR] Start a while block
.PP
.SS "RELOCATION TABLE"
Relocation table is a binary table containing the offset from the beginning of the long word (32bit) that need a relocation. Each offset is stored as a long word (obviously Motorola 32 bit big endian). The table ends by a offset equal to -1 (0xFFFFFFFF).
.PP
.PP
.nf
 ;
 ; Sample code to use as68 relocation table.
 ;
 ; a0: relocation table
 ; a1: binary
 reloc:
   move.l  (a0)+,d0
   cmp.l   #-1,d0
   beq.s   .finish
   add.l   a1,0(a1,d0.l)
   bra.s   reloc
 .finish:
   rts        
.PP
.SS "STRIPING BSS"
as68 does not handle sectionning. Anyway it assumes that BSS is all zeroed data at the end of the binary. Striping BSS means to remove this data even if it were not generated by a ds.x instruction.
.SH "BUGS"
.PP
Report to \fIbug@sashipa.com\fP.
.PP
.IP "\(bu" 2
Missing relocation. 
.IP "\(bu" 2
-P forces -R. \fBorg\fP directive is disabled !! 
.IP "\(bu" 2
pea relatif PC, bugs with -P or -R 
.IP "\(bu" 2
symbol created by xx = v are always lower case ! 
.IP "\(bu" 2
label can not have an instruction name 
.IP "\(bu" 2
label can start at any column
.PP
.SH "SEE ALSO"
.PP
\fIas68\fP, \fIdebug68\fP, \fIinfo68\fP, \fIsc68\fP, \fIsourcer68\fP, \fIunice68\fP 
.PP

