@c -*-texinfo-*-

@center as68 - Mc68000 macro assembler


as68 is a very fast Motorola 68000 macro assembler.
  
@section Usage
@display
as68 [options] <input> [-o <output>] [-s <symbol>]
@end display
 
@section Options

@table @asis
 @item ---help
Display help message and exit.
 @item --V
Be verbose.
 @item --v
Be quiet.
 @item --b<number>
Set internal code buffer size to <number> Kb.
 @item --P
Produce warning for position dependant code.
 @item --p
Do not produce warning for position dependant code (default).
 @item -t
Do not strip BSS at the end of output binary (default).
 @item -T
Strip BSS at the end of output binary.
 @item --r
Do not produce relocation table (default).
 @item --R
Produce relocation table.
 @item --o <output>
Set binary output file (default is <input> with .bin extension).
 @item --s <reloc>
Set relocation output file (default is <input> with .rel extension).
@end table

@section Assembler syntax

as68 syntax is very close to hisoft genst(tm). Except for some assembly directives are which are followed by a @{ ... @} block. In other words it should be close enough to Motorola specifications.

@subsection Macro syntax

Sample below should demonstrate macro basic syntax.

@format
name MACRO
@{
label_\@@:        ;\@@ is replaced by macro unic id (incremented number).
  move.l #\1,\2  ;\1 is the first macro parameter, \2 the second ...
@}
@end format


@subsection Assembler control directives

This section briefly describes as68 assembler directives. This list is probably not exhaustive.

@table @asis
@item ALIGN
      [EXPR] Set align to given position
@item DEFAULT
      [BYTE|WORD]  Set default opcode size
@item EVEN
      Set align to next even position
@item IF
      [EXPR] Start a conditionnal block
@item INCBIN
      [FILE] Include binary file.
@item INCLUDE
      [FILE] Include source file.
@item LOAD
      [EXPR] Set load address (cross devel)
@item LS
      [FILE] Load symbol
@item LST
      [FILE] Load symbol 2!
@item ORG
      [EXPR] Set assembly address.
@item PRINT
      [EXPR] Output a message
@item RELOCATION
      [on|off] Set relocation generation
@item REPEAT
      Start a REPEAT ... UNTIL loop
@item RPT
      as REPEAT
@item RSRESET
      Reset current structure
@item RSSET
      Add a field to current structure
@item RUN
      [EXPR] Set run address (cross devel)
@item UNTIL cond
      End a REPEAT ... UNTIL loop
@item WHILE
      [EXPR] Start a while block
@end table


@subsection Relocation table

Relocation table is a binary table containing the offset from the beginning of the long word (32bit) that need a relocation. Each offset is stored as a long word (obviously Motorola 32 bit big endian). The table ends by a offset equal to -1 (0xFFFFFFFF).

@format
;
; Sample code to use as68 relocation table.
;
; a0: relocation table
; a1: binary
reloc:
        move.l  (a0)+,d0
        cmp.l   #-1,d0
        beq.s   .finish
        add.l   a1,0(a1,d0.l)
        bra.s   reloc
.finish:
        rts        
@end format


@subsection Striping BSS

as68 does not handle sectionning. Anyway it assumes that BSS is all zeroed data at the end of the binary. Striping BSS means to remove this data even if it were not generated by a ds.x instruction.
