This is sc68.info, produced by makeinfo version 4.6 from sc68.texi.

INFO-DIR-SECTION Sound
START-INFO-DIR-ENTRY
* sc68: (sc68).                 Atari ST and Amiga music player
END-INFO-DIR-ENTRY


File: sc68.info,  Node: Top,  Next: Overview,  Prev: (dir),  Up: (dir)

* Menu:

* Overview::                    About sc68 project.
* Install::                     Install documentation.
* sc68::                        sc68 command line player documentation.
* info68::                      sc68 file information program.
* debug68::                     sc68 file creation and debug program.
* as68::                        68000 assembler program.
* sourcer68::                   68000 sourcer (disassembler) program.
* unice68::                     ICE depacker program.
* Resource files::              sc68 resource files.


File: sc68.info,  Node: Overview,  Next: Install,  Prev: Top,  Up: Top

Overview
********

#

sc68 programs and utilities are distributed under GNU PUBLIC LICENCE.

What is sc68 ?
==============

sc68 is an Atari ST and Amiga music player. It emulates the Mc68000
microprocessor and all Atari ST and Amiga chips necessary to play
musics.

sc68 music files
================

sc68 programs handle sc68 files (.sc68). A complete collection of sc68
files and more informations are available on sc68 official website
<http://sashipa.ben.free.fr/sc68/>.

Developers
==========

Developper documentation, CVS repository and more may be find at
<http://sourceforge.net/projects/sc68/>.


File: sc68.info,  Node: Install,  Next: sc68,  Prev: Overview,  Up: Top

Install
*******

* Menu:

* Install source distrib::  Compile and install sc68.
* User install::            Install sc68 resource files for a user.


File: sc68.info,  Node: Install source distrib,  Next: User install,  Prev: Install,  Up: Install

Installing from the source distribution
=======================================

If you have is info file in your system, you have probably already
installed sc68. Anyway here are the installation procedure.

Go the the directory containing the distribution. You should find an
`INSTALL' file which contains a more detailled installation
instructions.

  1. `cd' to the directory containing the package's source code.

  2. Type `sh ./configure' to configure the package for your system.
     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  3. Type `make' to compile the package.

  4. Make sure you have enougth permission to perform next step. You
     probably need to be root. Type `su' and enter root password.

  5. Type `make install' to install the programs and any data files and
     documentation.

  6. Optionnally type `exit' to exit root shell.

  7. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

  8. Optionnaly install sc68 resource files for each user.

     *Note User install::.



File: sc68.info,  Node: User install,  Prev: Install source distrib,  Up: Install

User install
============

Since version 2.0.0 sc68 does not need any particular user installation
to work properly. *Note Resource files::.

Anyway user should at least create the .sc68 directory in its home path.

                          `mkdir $HOME/.sc68'

The configuration file location has changed. Most config variables are
now obsolete. As these varaibles are skipped you can safely copy your
old configuration files to the new location and remove the old ones.

`cp $HOME/.sc68/Config/*.txt $HOME/.sc68 && rm -rf $HOME/.sc68/Config'


File: sc68.info,  Node: sc68,  Next: info68,  Prev: Install,  Up: Top

sc68
****

                      sc68 - command line player

This programs is the command line version of sc68 player. It load and
play a sc68 disk file (.sc68). Audio data is written to the standard
output. PCM format is signed stereo 16 bit machine endian.

Usage
=====

     sc68 [options] input-sc68-file

Options
=======

--help
     Display this message and exit.

--version
     Display sc68 version x.y.z and exit.

--quiet
     Be quiet (do not display music information).

--track=[track]
     Choose track to play [0=all tracks].

Resource files
==============

For information, see *Note Resource files::.


File: sc68.info,  Node: info68,  Next: debug68,  Prev: sc68,  Up: Top

info68
******

         info68 - Get and format information from sc68 files.

Usage
=====

     info68 [option ... ] sc68-file [ command ...]

Options
=======

--help
     Display this message and exit.

--version
--build
     Display build date and exit.

-o file
--output file
     Change output to file (- is stdout).

Commands
========

All COMMANDS excepted TRACK-LIST display something. Unkwown commands
are skipped with a warning.

Disk commands
-------------

These commands display disk information.

-#      Number of tracks.
-?      Default track.
-n      Disk name.
-a      Default track author name.
-c      Default track composer name.
-T      Disk time in sec.
-Y      Formated disk time. Format "TT MM:SS".
-H      All tracks ORed hardware flags (see -h).

Track-list command
------------------

This command is a kind of loop.

-DIGIT[[,DIGIT]|[-DIGIT]]
     track-list executes following track-commands for all listed tracks
     until another track-list is encountered or end of command line.

     Track are base 1 numbered. 0 is substituted to the number of
     tracks.

     e.g: `-1,5,[4-6]' works with tracks 1,5,4,5 and 6 in this order.

Track commands
--------------

Following commands are applied to current track.

-%      Track number.
-n      Track name.
-a      Author name.
-c      Composer name.
-r      Replay name.
-t      Time in sec.
-y      Formated "TT MM:SS" time.
-f      Replay frequency.
-@      Load address.
-h      Hardware flags [YSA] uppercase means activated.
        Y:YM-2149 S:STE A:Amiga

Misc commands
-------------

-L          Display a newline character.
--STRING    Display "-STRING".
STRING      Display "STRING".


File: sc68.info,  Node: debug68,  Next: as68,  Prev: info68,  Up: Top

debug68
*******

                 debug68 - Create and debug sc68 files

Usage
=====

     debug68 [options ... ] <file>

Options
=======

--help          Display help message and exit.

Description
===========

debug68 commands are self documented. Try `help' command inside debug68
shell.

Resource files
==============

For information, see *Note Resource files::.


File: sc68.info,  Node: as68,  Next: sourcer68,  Prev: debug68,  Up: Top

as68
****

                    as68 - Mc68000 macro assembler

as68 is a very fast Motorola 68000 macro assembler.

Usage
=====

     as68 [options] <input> [-o <output>] [-s <symbol>]

Options
=======

--help
     Display help message and exit.

-V
     Be verbose.

-v
     Be quiet.

-b<number>
     Set internal code buffer size to <number> Kb.

-P
     Produce warning for position dependant code.

-p
     Do not produce warning for position dependant code (default).

-t
     Do not strip BSS at the end of output binary (default).

-T
     Strip BSS at the end of output binary.

-r
     Do not produce relocation table (default).

-R
     Produce relocation table.

-o <output>
     Set binary output file (default is <input> with .bin extension).

-s <reloc>
     Set relocation output file (default is <input> with .rel
     extension).

Assembler syntax
================

as68 syntax is very close to hisoft genst(tm). Except for some assembly
directives are which are followed by a { ... } block. In other words it
should be close enough to Motorola specifications.

Macro syntax
------------

Sample below should demonstrate macro basic syntax.

name MACRO
{
label_\@:        ;\@ is replaced by macro unic id (incremented number).
  move.l #\1,\2  ;\1 is the first macro parameter, \2 the second ...
}

Assembler control directives
----------------------------

This section briefly describes as68 assembler directives. This list is
probably not exhaustive.

ALIGN
     [EXPR] Set align to given position

DEFAULT
     [BYTE|WORD]  Set default opcode size

EVEN
     Set align to next even position

IF
     [EXPR] Start a conditionnal block

INCBIN
     [FILE] Include binary file.

INCLUDE
     [FILE] Include source file.

LOAD
     [EXPR] Set load address (cross devel)

LS
     [FILE] Load symbol

LST
     [FILE] Load symbol 2!

ORG
     [EXPR] Set assembly address.

PRINT
     [EXPR] Output a message

RELOCATION
     [on|off] Set relocation generation

REPEAT
     Start a REPEAT ... UNTIL loop

RPT
     as REPEAT

RSRESET
     Reset current structure

RSSET
     Add a field to current structure

RUN
     [EXPR] Set run address (cross devel)

UNTIL cond
     End a REPEAT ... UNTIL loop

WHILE
     [EXPR] Start a while block

Relocation table
----------------

Relocation table is a binary table containing the offset from the
beginning of the long word (32bit) that need a relocation. Each offset
is stored as a long word (obviously Motorola 32 bit big endian). The
table ends by a offset equal to -1 (0xFFFFFFFF).

;
; Sample code to use as68 relocation table.
;
; a0: relocation table
; a1: binary
reloc:
        move.l  (a0)+,d0
        cmp.l   #-1,d0
        beq.s   .finish
        add.l   a1,0(a1,d0.l)
        bra.s   reloc
.finish:
        rts

Striping BSS
------------

as68 does not handle sectionning. Anyway it assumes that BSS is all
zeroed data at the end of the binary. Striping BSS means to remove this
data even if it were not generated by a ds.x instruction.


File: sc68.info,  Node: sourcer68,  Next: unice68,  Prev: as68,  Up: Top

sourcer68
*********

                   sourcer68 - Mc68000 disassembler

Usage
=====

     sourcer68 [options] <input>

Description
===========

sourcer68 is a 68000 disassambler. Input file can be either BINARY, TOS
program (Atari .prg .tos ...) or SC68 file. The dissassembler starts a
disassemble pass at the beginning of the input depending on its type.

BINARY
     entry is offset +0.

TOS
     entry is the program entry point. By default TOS program are
     relocated.

SC68
     3 entries are offset +0 +4 and +8 corresponding to sc68 replay
     convention.

     External replay is loaded if needed. Specify replay-path with
     -replay= or with environment varaiable.

Disassemble pass
----------------

A disassemble pass starts at an ENTRY point. The disassembler will try
to follow program branchs. It should add every needed symbols. There is
a heuristic to try to find jump tables (sequential branch instruction).

Options
=======

-help                    Display this message and exit.

-reloc=[yes|no|auto]     TOS relocation (default:auto).

-replay=PATH             Force replay path.

-entry=[ENTRY-LIST]      Set disassembly entry points.

-tab=[STRING]            Set tabulation string.

ENTRY-LIST
----------

ENTRY-LIST := ENTRY[,ENTRY...]

An ENTRY-LIST is an ordered coma (',') separated list of ENTRY points
which define disassembler start points.

ENTRY
-----

ENTRY := [l][+]integer

l
     Get long at the effective address (indirection). l options could
     by use more than once. (eg. `ll0x440').

+
     Effective address is file start + integer.

integer
     Number ("C" format: 0x for hexa, 0 for octal)

Resource files
==============

For information, see *Note Resource files::.


File: sc68.info,  Node: unice68,  Next: Resource files,  Prev: sourcer68,  Up: Top

unice68
*******

                        unice68 - Depacker ICE

unice68 is an Ice depacker based on 68000 ICE 2.40 original routine.

Usage
=====

     unice68 [option ...] <input> <output>

Options
=======

--help
     Display help message and exit.

-v
     Be verbose.

-q
     Be quiet.


File: sc68.info,  Node: Resource files,  Prev: unice68,  Up: Top

Resource files
**************

Introduction
============

Resource files are necessar data files for sc68 to work properly. They
are organized by directories inside the sc68 resources path.

There is a site wide resource path (*shared resources*) that contains
default package resource files.

Users can have their own resource files (*user resources*).

Location
========

Shared resources
----------------

Shared resource location depends on configuration and installation
options. This package seems to have been installed at `/usr/share/sc68'
location.

The `SC68_DATA' variable overrides the default *shared resource* path.

User resources
--------------

Default *user resources* location is `$HOME/.sc68'

The `SC68_HOME' variable overrides the default *user resources* path.
*user resources* are prior to *shared resources*. When sc68 tries to
load a resource file it will first try the *user resources* path and
fallback to *shared resources* one in failure case.

Resource files to be written (as the configuration file *Note Config
file::.) will only be saved in the *user resources* path. This path
must be a valid *existing* directory with proper access right.

Resource types
==============

sc68 resource are organized in different types. Each resource file is
located in a directory depending on its type. The base directory can be
either *shared resources* path or *user resources* path. In the table
below it will be noted `$(BASE)'.

*Type*   *Location*       *Description*
config   $(BASE)          Configuration file (default is
                          config.txt). *Note Config file::.
replay   $(BASE)/Replay   Music player used by some sc68 files.
sample   $(BASE)/Sample   sc68 music file samples.
dll      $(BASE)/Dll      Extra DLLs (Windows version only).

Configuration file
------------------

sc68 configuration is a plain text file. Its default location is
`$HOME/.sc68/Config/config.txt' or `/usr/share/sc68/config.txt'. More
details, *Note Resource location::.

If it does not exist sc68 file should create a default configuration
file in the *user resources* path.

Configuration file is a line oriented file. Lines beginning by a hash
(#) character are considered as comment. Spaces at the beginning of
line are skipped. Spaces around the equal (=) character are optionnal.

Valid lines have the following format:
     NAME = VALUE COMMENTS

`NAME'
     Variable name. It must begin by a letter and contain only
     alphanumeric character or underscore (_).

`VALUE'
     Variable value. It is a number stored in "C" format. Use `0x'
     prefix for hexadecimal value and `0' as octal prefix.

`COMMENTS'
     Any comments.

When sc68 saves the configuration, it adds the following COMMENTS:

     NAME = VALUE [MIN..MAX] (DEFAULT) DESCRIPTION

Config variables
................

Here is the list of currently used config variables.

*version*
     sc68 version number. Should not be change.

*amiga_blend*
     Amiga left/right channel blending factor. 0:Amiga original(no
     blending), 32768:mono, 65536:swap L/R.

*force_track*
     Choose default track when a new disk is loaded. 0:use disk default

*skip_time*
     Skip playing music with a duration less than this value. Useful to
     skip some SFX track in some sc68 files.

*total_time*
     Count the number of seconds of sc68 music played so far. Should
     not be change.



Tag Table:
Node: Top197
Node: Overview827
Node: Install1508
Node: Install source distrib1732
Node: User install3382
Node: sc684013
Node: info684705
Node: debug686454
Node: as686896
Node: sourcer689979
Node: unice6811780
Node: Resource files12159
Ref: Resource location12582
Ref: Config file14015

End Tag Table
